// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yjcdsudshecqgtvchhaj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqY2RzdWRzaGVjcWd0dmNoaGFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1MzA1MDIsImV4cCI6MjA1ODEwNjUwMn0.cX9kV35mkCo8yYilMChBp4KYQ-0cHelC0c99kbvjypk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Helper function to check if bucket exists - avoids permission errors
export const ensureBucketExists = async (bucketName: string): Promise<boolean> => {
  try {
    console.log(`Attempting to create bucket ${bucketName}...`);
    
    // Try to create the bucket directly first
    const { data: createData, error: createError } = await supabase.storage.createBucket(bucketName, {
      public: true,
      fileSizeLimit: 50 * 1024 * 1024, // 50MB limit
    });

    if (createError) {
      // If bucket already exists, we'll get a specific error
      if (createError.message.includes('already exists')) {
        console.log(`Bucket ${bucketName} already exists`);
        return true;
      }
      
      console.error(`Error creating bucket directly:`, createError);
      
      // If direct creation fails, try via Edge Function
      if (bucketName === 'post_media' || bucketName === 'album_media' || bucketName === 'media' || bucketName === 'videos') {
        console.log(`Attempting to initialize ${bucketName} bucket via Edge Function`);
        
        const response = await fetch(`${SUPABASE_URL}/functions/v1/create-media-bucket`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
          },
          body: JSON.stringify({ bucket_name: bucketName })
        });
        
        if (response.ok) {
          console.log(`Successfully created ${bucketName} bucket via Edge Function`);
          return true;
        } else {
          const errorText = await response.text();
          console.error(`Failed to create ${bucketName} bucket via Edge Function:`, errorText);
        }
      }
    } else {
      console.log(`Successfully created ${bucketName} bucket directly`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`Error handling bucket ${bucketName}:`, error);
    return false;
  }
};
